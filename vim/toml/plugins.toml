[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

# {{{ お世話になったdeoplete.nvim
#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  "" 起動時に有効化
#  "call deoplete#enable()
#
#  " 上記で動かないので、原因わかるまでの暫定対応
#  autocmd VimEnter * call deoplete#enable()
#  autocmd BufRead,BufNewFile * call deoplete#enable()
#'''
# }}}

[[plugins]]
repo = 'Shougo/neomru.vim'

## denite.vim依存
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['roxma/vim-hug-neovim-rpc','roxma/vim-hug-neovim-rpc', 'Shougo/neomru.vim']
hook_add='''
  nmap ,d [denite]

  " 最近開いたファイル
  nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>

  " カレントディレクトリ以下のファイルからカーソル下の文字列を検索
  nnoremap <silent> [denite], :<C-u>DeniteCursorWord -auto-action=preview grep -buffer-name=search line<CR>

  " grepした結果を再表示
  nnoremap <silent> [denite]gs :<C-u>Denite -auto-action=preview -resume -buffer-name=search<CR>

  if has('nvim')
    " カレントディレクトリとバッファを表示
    nnoremap <silent> [denite]a :<C-u>Denite file buffer -split=floating file:new<CR>

    " バッファを表示
    nnoremap <silent> [denite]b :<C-u>Denite buffer -split=floating file:new<CR>

    " カレントディレクトリを表示
    nnoremap <silent> [denite]f :<C-u>Denite file -split=floating file:new<CR>

    " カレントディレクトリ以下を再帰的に表示
    nnoremap <silent> [denite]r :<C-u>Denite file/rec -split=floating file:new<CR>

    " カレントディレクトリ以下のファイルから指定した文字列を検索
    nnoremap <silent> [denite]gr :<C-u>Denite grep -buffer-name=search<CR>

    " Neovim内で実行したコマンドを表示
    nnoremap <silent> [denite]c :<C-u>Denite command_history -split=floating<CR>
  else
    " カレントディレクトリとバッファを表示
    nnoremap <silent> [denite]a :<C-u>Denite file buffer -split=horizontal file:new<CR>

    " バッファを表示
    nnoremap <silent> [denite]b :<C-u>Denite buffer -split=horizontal file:new<CR>

    " カレントディレクトリを表示
    nnoremap <silent> [denite]f :<C-u>Denite file -split=horizontal file:new<CR>

    " カレントディレクトリ以下を再帰的に表示
    nnoremap <silent> [denite]r :<C-u>Denite file/rec -split=horizontal file:new<CR>

    " カレントディレクトリ以下のファイルから指定した文字列を検索
    nnoremap <silent> [denite]gr :<C-u>Denite -auto-action=preview grep -buffer-name=search<CR>

    " Neovim内で実行したコマンドを表示
    nnoremap <silent> [denite]c :<C-u>Denite command_history -split=horizontal<CR>
  endif


  " file/recで特定のディレクトリを除外する
  let s:ignore_globs = ['.git', '.svn', 'node_modules']
  call denite#custom#var('file/rec', 'command', [
      \ 'ag',
      \ '--follow',
      \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
      \ '--nocolor',
      \ '--nogroup',
      \ '-g',
      \ ''
      \ ])

  " matcher/ignore_globs 以外のお好みの matcher を指定する
  call denite#custom#source('file/rec', 'matchers', ['matcher/fuzzy', 'matcher/substring'])

  "" 特定ディレクトリをリスティングしない
  "call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', ['.git', '.svn', '*node_modules*'])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', ['.git', '.svn'])

  " file/rec に ag を設定
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>     denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d        denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p        denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q        denite#do_map('quit')
    nnoremap <silent><buffer><expr> i        denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>  denite#do_map('toggle_select').'j'
  endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#なんでか２つ読み込んでた？
#[[plugins]]
#repo = 'Shougo/vimproc.vim'
#hook_post_update = '''
#  call dein#add('Shougo/vimproc', {'build': {
#    \     'windows' : 'tools\\update-dll-mingw',
#    \     'cygwin'  : 'make -f make_cygwin.mak',
#    \     'mac'     : 'make -f make_mac.mak',
#    \     'linux'   : 'make',
#    \     'unix'    : 'gmake',
#    \    },
#    \ })
#'''
#hook_add = '''
#    if has('mac')
#      let g:vimproc_dll_path = '$HOME/.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/lib/vimproc_mac.so'
#    elseif has('unix')
#      let g:vimproc_dll_path = '$HOME/.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/lib/vimproc_linux64.so'
#    elseif has('win32')
#      let g:vimproc_dll_path = $HOME . '.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/vimproc_win32.dll'
#    elseif has('linux')
#      let g:vimproc_dll_path = $HOME . '.vim/utils/dein/repos/github.com/Shougo/vimproc.vim/vimproc_win64.dll'
#    endif
#'''

### {{{ お世話になったunite.vim
# [[plugins]]
# repo = 'Shougo/unite.vim'
# depends = ['neomru.vim', 'unite-locate', 'unite-outline']
# hook_add = '''
#   nmap ,u [unite]
#
#   " 入力モードで開始する
#   "let g:unite_enable_start_insert=1
#
#   " バッファ一覧
#   nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
#
#   " ファイル一覧
#   nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
#
#   " レジスタ一覧
#   nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
#
#   " 全部乗せ
#   nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
#
#   "ブックマーク一覧
#   nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
#
#   "ブックマークに追加
#   nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
#
#   " unite grep
#   noremap <silent> [unite]g :Unite grep<CR>
#
#   " Unite line 個人設定
#   nnoremap <silent> [unite]lb :Unite line -input=Backbone.*extend<CR>
#   nnoremap <silent> [unite]lf :Unite line -input=function<CR>
#   nnoremap <silent> [unite]ll :Unite line<CR>
#   nnoremap <silent> [unite]lp :Unite line<CR>
#   nnoremap <silent> [unite]ms :Unite mapping source<CR>
#
#   nnoremap <silent> ,ums :Unite mapping source<CR>
#
#   " ウィンドウを分割して開く
#   au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
#   au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
#
#   " ウィンドウを縦に分割して開く
#   au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
#   au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
#
#   " ESCキーを2回押すと終了する
#   au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
#   au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
#
#   " NOTE: http://qiita.com/0829/items/7053b6e3371592e4fbe6
#   " unite grep に ag(The Silver Searcher) を使う
#   if executable('ag')
#     let g:unite_source_grep_command = 'ag'
#     let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
#     let g:unite_source_grep_recursive_opt = ''
#   endif
# '''
#
# [[plugins]]
# repo = 'Shougo/unite-outline'
# on_source = ['Shougo/unite.vim']
# hook_add = '''
#   " アウトライン一覧
#   nnoremap <silent> [unite]uo :Unite outline<CR>
# '''
#
# [[plugins]]
# repo = 'ujihisa/unite-locate'
# on_source = ['Shougo/unite.vim']
#
# [[plugins]]
# repo = 'Shougo/neomru.vim'
# on_source = ['Shougo/unite.vim']
# hook_add = '''
#   " 最近使用したファイル一覧
#   nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
#
#   " 常用セット
#   nnoremap <silent> [unite]u :<C-u>Unite buffer file_mru<CR>
# '''
### }}}

# [[plugins]]
# repo = 'Shougo/neosnippet'
# hook_add='''
#   "Ctrl+Iにターゲットジャンプ割当
#   imap <C-i> <Plug>(neosnippet_expand_or_jump)
#   smap <C-i> <Plug>(neosnippet_expand_or_jump)
#   xmap <C-i> <Plug>(neosnippet_expand_target)
#
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif
#
#   let s:neosnippet_directorys = [ '~/.cache/dein/repos/github.com/svjunic/svjunic-snip/snippets' ]
#   let g:neosnippet#snippets_directory = join( s:neosnippet_directorys, ',' )
# '''
# depends = ['neosnippet-snippets', 'svjunic/svjunic-snip']
#
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# on_i = 1

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'

[[plugins]]
repo = 'vim-scripts/Align'

# [[plugins]]
# repo = 'dense-analysis/ale'
# hook_add = '''
#   "" Equivalent to the above.
#   "let g:ale_linters = {
#   "\ 'html': ['htmlhint'],
#   "\ 'javascript': ['eslint'],
#   "\ 'typescript': ['eslint', 'tsserver'],
#   "\ 'vue': ['vls'],
#   "\}
#
#   "let g:ale_linter_aliases = {'typescriptreact': 'typescript'}
#
#   " Enable completion where available.
#   "let g:ale_completion_enabled = 0
#   " 有効にするとcoc?と組み合わさってめちゃくちゃ重くなるっぽい（vueで確認）
#   let g:ale_completion_enabled = 0
#
#   "" ローカルで新しいeslint入れられてどうしようもないので、解消するまでグローバルでしのいでみる
#   let g:ale_use_global_executables = 1
#
#   "" 保存時にpretteirをかけてeslintをする
#   "let g:ale_fixers = {}
#   "let g:ale_fixers.css = ['prettier']
#   "let g:ale_fixers.scss = ['prettier']
#   "let g:ale_fixers.html = ['prettier']
#   "let g:ale_fixers.xml = ['prettier']
#   "let g:ale_fixers.pug = ['prettier']
#   "let g:ale_fixers.javascript = ['prettier', 'eslint']
#   "let g:ale_fixers.mjs = ['prettier', 'eslint']
#   "let g:ale_fixers.jsx = ['prettier', 'eslint']
#   "let g:ale_fixers.vue = ['prettier', 'eslint']
#   "let g:ale_fixers.typescript = ['prettier', 'eslint']
#   "let g:ale_fixers.typescriptreact = ['prettier', 'eslint']
#   "let g:ale_fixers.typescripttsx= ['prettier', 'eslint']
#
#
#   "" 圧縮ファイルのときはなるべく動かさない
#   "let g:ale_pattern_options = {
#   "\ '\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
#   "\ '\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
#   "\}
#
#   "" ファイル保存時に実行
#   "function! ALE_FIX_TOGGLE()
#   "  if !exists('g:ale_fix_on_save') || g:ale_fix_on_save == 0
#   "    let g:ale_fix_on_save = 1
#   "  else
#   "    let g:ale_fix_on_save = 0
#   "  endif
#   "endfunction
#   "call ALE_FIX_TOGGLE()
#
#   " 変更されてからlint実行までのdelay
#   let g:ale_lint_delay=10
#
#   "" ステータスバーの表示
#   "let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
#
#   " ローカルの設定ファイルを考慮する
#   let g:ale_javascript_prettier_use_local_config = 1
#
#   " エラー行の表示部分を常に表示する
#   let g:ale_sign_column_always = 1
#
#   "" ctrl+j/kでエラー行に移動
#   "nmap <silent> <C-j> <Plug>(ale_next_wrap)
#   "nmap <silent> <C-k> <Plug>(ale_previous_wrap)
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nmap <silent> ,gb :Gblame<CR>
  nmap <silent> ,gl :Glog<CR>
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'

#[[plugins]]
#repo = 'airblade/vim-gitgutter'
#hook_add = '''
#  " aleとかぶるので基本off
#  let g:gitgutter_enabled = 0
#  let g:gitgutter_highlight_lines = 0
#  let g:gitgutter_map_keys = 0
#
#  " normalモードでgitと打つと変化の部分トグル
#  nmap <silent> ,gd :GitGutterToggle<CR>
#'''

[[plugins]]
repo = 'svjunic/RadicalGoodSpeed'
rev= 'develop'

[[plugins]]
repo = 'svjunic/snortist-theme.vim'

[[plugins]]
repo = 'svjunic/svjunic-snip'
rev = 'hotfix/coc'

[[plugins]]
repo = 'mlaursen/vim-react-snippets.git'

[[plugins]]
repo = 'Valloric/MatchTagAlways'
on_ft = ['html', 'vue', 'typescript', 'javascript']
hook_add = '''
  "let g:mta_use_matchparen_group = 1

  let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'javascript' : 1,
      \ 'jsx' : 1,
      \ 'vue' : 1,
      \ 'typescript' : 1,
      \}
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft= ['javascript']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft= ['javascript']

#[[plugins]]
#repo = 'posva/vim-vue'
#on_ft= ['vue']
#hook_add = '''
#  autocmd FileType vue syntax sync fromstart
#'''

[[plugins]]
repo = 'leafOfTree/vim-vue-plugin'
on_ft= ['vue']
hook_add = '''
  let g:vim_vue_plugin_load_full_syntax = 1
  "let g:vim_vue_plugin_use_pug = 1
  let g:vim_vue_plugin_use_sass = 1
  let g:vim_vue_plugin_use_typescript = 1
'''

[[plugins]]
repo = 'kevinoid/vim-jsonc'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'

[[plugins]]
repo = 'ap/vim-css-color'

[[plugins]]
repo = 'yasuharu519/vim-codic'
hook_add = '''
  nmap <silent> ,cd :VimCodic<CR>
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# [[plugins]]
# repo = 'rizzatti/dash.vim'
