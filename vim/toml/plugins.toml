# NOTE: https://qiita.com/delphinus/items/cd221a450fd23506e81a
## hook の名前         実行されるタイミング                            lazy OFF   lazy ON
## hook_add            プラグインが dein.vim によって追加されたとき    OK         OK
## hook_source         プラグインが読み込まれる直前                    NG         OK
## hook_post_source    プラグインが読み込まれた直後                    NG         OK
## hook_post_update    プラグインが更新された直後                      OK         OK
## hook_done_update    プラグイン全ての更新が終わった直後              OK         OK

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
on_event = 'BufRead'
hook_post_update = 'TSUpdate'

# [[plugins]]
# repo = 'nvim-treesitter/playground'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
  lua << EOF
  local lspconfig = require('lspconfig')

  -- LSPの機能をcmpに提供する設定
  local capabilities = require('cmp_nvim_lsp').default_capabilities()

  -- LSPサーバーの設定
  -- TypeScript/JavaScript
  lspconfig.ts_ls.setup({
    capabilities = capabilities,
    root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", "jsconfig.json", ".git"),
    single_file_support = true
  })
  -- Vue
  lspconfig.volar.setup({
    capabilities = capabilities
  })
  -- HTML
  lspconfig.html.setup({
    capabilities = capabilities
  })
  -- CSS
  lspconfig.cssls.setup({
    capabilities = capabilities
  })
  -- JSON
  lspconfig.jsonls.setup({
    capabilities = capabilities
  })
  -- PHP
  lspconfig.intelephense.setup({
    capabilities = capabilities
  })

  -- キーマッピング
  local opts = { silent = true }
  vim.keymap.set('n', 'gd'       , vim.lsp.buf.definition     , opts)
  vim.keymap.set('n', 'gD'       , vim.lsp.buf.declaration    , opts)
  vim.keymap.set('n', 'gy'       , vim.lsp.buf.type_definition, opts)
  vim.keymap.set('n', 'gi'       , vim.lsp.buf.implementation , opts)
  vim.keymap.set('n', 'gr'       , vim.lsp.buf.references     , opts)
  vim.keymap.set('n', '<space>h' , vim.lsp.buf.hover          , opts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename         , opts)
  vim.keymap.set('n', '<space>a' , vim.lsp.buf.code_action    , opts)
  vim.keymap.set('n', '<C-j>'    , vim.diagnostic.goto_next   , opts)
  vim.keymap.set('n', '<C-k>'    , vim.diagnostic.goto_prev   , opts)
  vim.keymap.set("n", "<space>e" , vim.diagnostic.open_float  , opts)
  vim.keymap.set("n", "<space>q" , vim.diagnostic.setloclist  , opts)

  -- 診断表示の設定
  vim.diagnostic.config({
    virtual_text = true,
    signs = true,
    underline = true,
    update_in_insert = false,
    severity_sort = true,
  })

vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
  vim.lsp.handlers.hover, {
    border = "rounded"
  }
)

EOF
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
hook_add = '''
lua <<EOF
  local cmp = require('cmp')
  cmp.setup({
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'buffer' },
      { name = 'path' },
    },
    window = {
      documentation = {
        winhighlight = 'Normal:CmpDocumentation',
      },
    },
    experimental = {
      ghost_text = true
    }
  })
EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'github/copilot.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['github/copilot.vim', 'nvim-lua/plenary.nvim', 'nvim-telescope/telescope.nvim']
branch = 'main'
hook_add = '''
  nmap ,cc [copilot_chat]
  nnoremap <silent> [copilot_chat]c <Cmd>CopilotChat<CR>
'''


[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/YankRing.vim'
hook_add = '''
  nmap ,y [yankring]
  nnoremap <silent> [yankring] <Cmd>YRShow<CR>
'''

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'Valloric/MatchTagAlways'
on_ft = ['html', 'vue', 'typescript', 'javascript']
hook_add = '''
  "let g:mta_use_matchparen_group = 1

  let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'javascript' : 1,
      \ 'jsx' : 1,
      \ 'vue' : 1,
      \ 'typescript' : 1,
      \}
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'nvimtools/none-ls-extras.nvim'

[[plugins]]
repo = 'nvimtools/none-ls.nvim'
depends = ['nvimtools/none-ls-extras.nvim']
hook_add = '''
lua << EOF
local null_ls = require("null-ls")

null_ls.setup({
    debug = true,
    sources = {
        null_ls.builtins.formatting.prettier,
        require("none-ls.code_actions.eslint"),
    },
    on_attach = function(client, bufnr)
        if client.supports_method("textDocument/formatting") then
            vim.api.nvim_create_autocmd("BufWritePre", {
                buffer = bufnr,
                callback = function()
                    vim.lsp.buf.format({
                        bufnr = bufnr,
                        filter = function(client)
                            return client.name == "null-ls"
                        end
                    })
                end,
            })
        end
    end,
})
EOF
'''

# # {{{ いまは使ってなさそう
# #[[plugins]]
# #repo = 'othree/yajs.vim'
# #on_ft= ['javascript']
#
# #[[plugins]]
# #repo = 'othree/es.next.syntax.vim'
# #on_ft= ['javascript']
# #
# ##[[plugins]]
# ##repo = 'posva/vim-vue'
# ##on_ft= ['vue']
# ##hook_add = '''
# ##  autocmd FileType vue syntax sync fromstart
# ##'''
# #
# #[[plugins]]
# #repo = 'wuelnerdotexe/vim-astro'
# #
# #[[plugins]]
# #repo = 'leafOfTree/vim-vue-plugin'
# #on_ft= ['vue']
# #hook_add = '''
# #  let g:vim_vue_plugin_load_full_syntax = 1
# #  "let g:vim_vue_plugin_use_pug = 1
# #  let g:vim_vue_plugin_use_sass = 1
# #  let g:vim_vue_plugin_use_typescript = 1
# #'''
# #
# #[[plugins]]
# #repo = 'kevinoid/vim-jsonc'
# #
# #[[plugins]]
# #repo = 'leafgarland/typescript-vim'
# #
# #[[plugins]]
# #repo = 'peitalin/vim-jsx-typescript'
# #
# #[[plugins]]
# #repo = 'ap/vim-css-color'
# #
# #[[plugins]]
# #repo = 'yasuharu519/vim-codic'
# #hook_add = '''
# #  nmap <silent> ,cd :VimCodic<CR>
# #'''
# #
# #[[plugins]]
# #repo = 'editorconfig/editorconfig-vim'
# #
# ## [[plugins]]
# ## repo = 'rizzatti/dash.vim'
# #
# #[[plugins]]
# #repo = 'simeji/winresizer'
# #hook_add = '''
# #  "後で考える
# #  "let g:winresizer_start_key='<C-A>'
# #  "let g:winresizer_gui_start_key='<C-A>'
# #'''
# # }}}
